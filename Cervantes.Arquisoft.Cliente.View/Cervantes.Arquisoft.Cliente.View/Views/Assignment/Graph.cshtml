@using Cervantes.Arquisoft.View.Models
@model IEnumerable<Cervantes.Arquisoft.View.Models.AssignmentViewModel>
@{
    ViewData["Title"] = "Graficos";
}

@{


    var jsonData = "[";
    var index = 0;
    
    if (!Model.Any() || Model.Any(assignment => assignment.StartedDate == null || (assignment.CompletedDate == null && assignment.SkippedDate == null)))
    {
       
    }
    else
    {
        foreach (var assignment in Model)
        {
            if (!assignment.IsSkipped && assignment.StartedDate != null && (assignment.CompletedDate != null || assignment.SkippedDate != null))
            {
                double durationDays = Math.Ceiling((assignment.CompletedDate - assignment.StartedDate)?.TotalDays ?? 0);
                durationDays = durationDays <= 0 ? 1 : durationDays;

                if (durationDays != 0)
                {
                    var taskData = "{";
                    taskData += $"\"id\": \"{index}\", "; // Usar el índice como id
                    taskData += $"\"duration\": {durationDays}, ";
                    taskData += $"\"name\": \"{assignment.AssignmentName}\", ";
                    taskData += $"\"actualStart\": \"{assignment.StartedDate?.ToString("yyyy-MM-dd")}\", ";
                    taskData += $"\"actualEnd\": \"{(assignment.CompletedDate != null ? assignment.CompletedDate?.ToString("yyyy-MM-dd") : assignment.SkippedDate?.ToString("yyyy-MM-dd"))}\", ";

                    // Dependencias
                    var dependencies = new List<int>();

                    // Buscar actividades completadas antes de la fecha de inicio de esta actividad
                    for (int i = 0; i < index; i++)
                    {
                        var dependencyAssignment = Model.ElementAtOrDefault(i);
                        if (dependencyAssignment != null && dependencyAssignment.CompletedDate < assignment.StartedDate)
                        {
                            dependencies.Add(i);
                        }
                    }

                    // Si hay dependencias, agregarlas al campo dependsOn
                    if (dependencies.Any())
                    {
                        taskData += $"\"dependsOn\": [{string.Join(",", dependencies)}], ";
                    }

                    taskData += $"\"progressValue\": 1"; // Suponiendo que el progreso es 100%

                    taskData += "},";
                    jsonData += taskData;

                    index++;
                }
            }
        }


        if (Model.Any())
        {
            jsonData = jsonData.Remove(jsonData.Length - 1);
        }

        jsonData += "]";
    }

}


<partial name="~/Views/Shared/Partials/_NavbarUser.cshtml" />
<h1>Graficos</h1>
<h5>Permite analizar los tiempos utilizados</h5>
    @if (Model.Any(assignment => assignment.IsSkipped))
    {
<div class="text-center alert alert-warning p-2">
    Algunas tareas han sido omitidas para este proyecto.
</div>
    }
    @if (!Model.Any() || Model.Any(assignment => assignment.StartedDate == null || (assignment.CompletedDate == null && assignment.SkippedDate == null)))
    {
<div class="text-center alert alert-warning p-2">
    Faltan tareas en este proyecto o las tareas están incompletas.
</div>
    }
<a asp-action="Index" asp-controller="Project" class="btn btn-primary mb-3"><i class="bi bi-box-arrow-in-left"></i> Volver a Projectos</a>

<div class="container">
    <div class="container">
        <div class="row">

            <div class="card custom-container mt-4 shadow-sm">
                <div class="card-body">
                    <h1 class="mb-4 text-center">Gantt</h1>
                    <div class="border">
                        <div id="containerGantt" style="width: 100%; height: 400px;"></div>
                    </div>
                </div>
                <small class="text-center alert alert-primary">Muestra claramente las fechas de inicio y finalización de cada tarea, así como las superposiciones y los solapamientos entre ellas.</small>
            </div>

            <div class="row">
                <div class="card custom-container mt-4 shadow-sm">
                    <div class="card-body">
                        <h1 class="mb-4 text-center">PERT</h1>
                        <div class="border">
                            <div id="containerPert" style="width: 100%; height: 400px;"></div>
                        </div>
                    </div>
                    <small class="text-center alert alert-primary">Permite visualizar y analizar la secuencia de actividades en un proyecto</small>
                </div>
            </div>
        </div>
    </div>

</div>
</div>

@section Scripts {
    <script src="https://cdn.anychart.com/releases/8.12.0/js/anychart-core.min.js" type="text/javascript"></script>
    <script src="https://cdn.anychart.com/releases/8.12.0/js/anychart-gantt.min.js" type="text/javascript"></script>
    <script src="https://cdn.anychart.com/releases/8.12.0/js/anychart-pert.min.js" type="text/javascript"></script>
    <script>

        // Obtener los datos en formato JSON para PERT
        var dataPert = @Html.Raw(jsonData);

        // Obtener los datos en formato JSON para Gantt
        var dataGantt = @Html.Raw(jsonData);

        console.table(dataGantt)

        anychart.onDocumentReady(function () {
            // create data
            var data = dataGantt

            // create a data tree
            var treeData = anychart.data.tree(data, "as-table");
            // create a chart
            var chart = anychart.ganttProject();
            // set the data
            chart.data(treeData);
            // set the container id
            chart.container("containerGantt");
            // initiate drawing the chart
            chart.draw();
            // fit elements to the width of the timeline
            chart.fitAll();
        });


        anychart.onDocumentReady(function () {
            // create a PERT chart
            var chart = anychart.pert();

            // set chart data
            chart.data(dataPert, "asTable");

            // set the title of the chart
            chart.title("");

            // set the container id for the chart
            chart.container("containerPert");

            // initiate drawing the chart
            chart.draw();

            // Handle pointsselect event
            chart.listen("pointsselect", function (e) {
                var title = "";
                for (var i = 0; i < e.selectedMilestones.length; i++) {
                    title += e.selectedMilestones[i].isCritical ? "Este hito pertenece al camino crítico" : "Este hito no pertenece al camino crítico";
                }
                for (var i = 0; i < e.selectedTasks.length; i++) {
                    title += e.selectedTasks[i].isCritical ? "Esta tarea pertenece al camino crítico" : "Esta tarea no pertenece al camino crítico";
                }
                chart.title(title);
            });

            // Set vertical spacing between tasks
            chart.verticalSpacing("20%");

            // Set colors of tasks
            var tasks = chart.tasks();
            tasks.normal().stroke("#519790");
            tasks.hovered().fill("#519790", 0.7);
            tasks.selected().fill("#519790", 2);
            tasks.normal().fill("#519790");
            tasks.hovered().stroke("#519790", 0.7);
            tasks.selected().stroke("#519790", 2);

            // Set expected time calculator
            chart.expectedTimeCalculator(function () {
                return (this.pessimistic + this.optimistic + this.mostLikely) / 3;
            });

            // Get project duration
            var duration = chart.getStat("pertChartProjectDuration");

        });

    </script>
}
